package exportarimagens;

import java.awt.AWTEvent;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.UIManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author TomMe
 */
public class Principal extends javax.swing.JFrame {

    private static final String DEFAULT_FOLDER = System.getProperty("user.dir") + "\\imagens";//"F:\\TomMe\\Downloads\\Mega\\MGFolha\\imagens";
    public static String versao = "0";
    private final Dimension ss = Toolkit.getDefaultToolkit().getScreenSize();
    private final Dimension frameSize = new java.awt.Dimension(500, 300);

    /**
     * Creates new form Principal
     */
    private Principal() {
        setLocationRelativeTo(null);
        initComponents();
        // Bloqueia a execução do Alt+F4
        Toolkit.getDefaultToolkit().addAWTEventListener((AWTEvent event) -> {
            KeyEvent ev = (KeyEvent) event;
            if (ev.getID() == KeyEvent.KEY_PRESSED) {
                if (isActive()) {
                    if (ev.getModifiers() == KeyEvent.ALT_MASK) {
                        if (ev.getKeyCode() == KeyEvent.VK_F4) {
                            ev.consume();
                        }
                    }
                }
            }
        }, AWTEvent.KEY_EVENT_MASK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pBarAtual = new javax.swing.JProgressBar();
        pBarTotal = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Atualização MGFolha 331");
        setBounds(new java.awt.Rectangle(300, 150, 500, 300));
        setName("tela"); // NOI18N
        setUndecorated(true);
        setResizable(false);
        setSize(frameSize);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Por favor aguarde");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Estamos concluindo a atualização");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Não desligue ou reinicie o computador");

        jMenu1.setText("Arquivo");

        jMenuItem1.setText("Sair");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(pBarAtual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pBarTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pBarAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pBarTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {pBarAtual, pBarTotal});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        UIManager.put("OptionPane.yesButtonText", "Sair");
        UIManager.put("OptionPane.noButtonText", "Continuar");
        if (JOptionPane.showConfirmDialog(null, "Confirma o fechamento da aplicação?\n"
                + "Caso a atualização ainda não tenha sido concluída os dados poderão ser corrompidos",
                "Atualização", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     * @throws java.sql.SQLException
     */
    public static void main(String args[]) throws IOException, SQLException {
        setVersao(args.length == 0 ? "3.31" : args[0]);
        final String targetFolder = DEFAULT_FOLDER;
        final exportarimagens.StoreImages storeImages = new exportarimagens.StoreImages(targetFolder);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Principal().setVisible(true);
        });
        try {
            Class.forName("org.firebirdsql.jdbc.FBDriver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(exportarimagens.StoreImages.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
//        UIManager.put("OptionPane.cancelButtonText", "Cancelar");
//        UIManager.put("OptionPane.noButtonText", "Não");
        UIManager.put("OptionPane.yesButtonText", "Confirmar");

        if (JOptionPane.showConfirmDialog(null, "Por favor, antes de prosseguir se certifique\n"
                + "de que todos os usuários estão desconectados.\n"
                + "Caso contrário essa atualização poderá não funcionar corretamente.\n"
                + "Caso esteja aberto, o MGFolha nessa máquina será fechado".toUpperCase(),
                "Atualização", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            atribuirOperacao(storeImages);
        } else {
            JOptionPane.showMessageDialog(null, "A atualização foi cancelada.\nPor favor reinicie o MGFolha");
            Runtime.getRuntime().exec("taskkill /f /im MGFolha.exe");
            System.exit(0);
        }
    }

    public static void atribuirOperacao(exportarimagens.StoreImages storeImages) {
        try {
            String ammy;
            Principal.getpBarTotal().setStringPainted(true);
            Principal.getpBarAtual().setStringPainted(true);

            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
//            Principal.getpBarAtual().setString("Baixar sistema suporte Ammy...");
//            ammy = StoreImages.gravaArquivoDeURL("http://assets.tommendes.com.br/mega/Suporte.exe", System.getProperty("user.dir") + "\\UTILITARIOS", "Suporte.exe").toString();
//            Principal.getpBarAtual().setString("Ammy suporte remoto gravado em: " + ammy + "...");
//            System.exit(0);

            Principal.getpBarTotal().setMaximum(7000);
            Principal.getpBarAtual().setString("Fechando o MGFolha...");
            storeImages.mensagem("Fechando o MGFolha...");
            Runtime.getRuntime().exec("taskkill /f /im MGFolha.exe");
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Conectando ao BD...");
            storeImages.conectar();
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Criando a tabela de opções...");
            storeImages.criarTblOpcao();
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Desativando a verificação inicial...");
            storeImages.desativaCodif();
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Desconectando do BD...");
            storeImages.desconectar();
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Verificando erros...");
            storeImages.gfixverif();
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Corrigindo erros...");
            storeImages.gfixCor();
            Principal.getpBarAtual().setMaximum(2000);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Becapeando BD...");
            storeImages.gbak("a");
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Reconectando ao BD...");
            storeImages.conectar();
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Exportando imagens...");
            storeImages.store();
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Atualizando a tabela de servidores...");
            storeImages.alterarTabelaServidores();
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Desconectando do BD...");
            storeImages.desconectar();
            Principal.getpBarAtual().setMaximum(2000);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Reduzindo o BD ...");
            storeImages.gbak("d");
            Principal.getpBarAtual().setMaximum(2000);
            Principal.getpBarAtual().setValue(0);
            storeImages.gbakres("d");
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Concluindo a atualização...");
            storeImages.deletebakd();
            Principal.getpBarAtual().setMaximum(2);
            Principal.getpBarAtual().setValue(0);
            Principal.getpBarAtual().setString("Baixar sistema suporte Ammy...");
            ammy = StoreImages.gravaArquivoDeURL("http://assets.tommendes.com.br/mega/Suporte.exe", System.getProperty("user.dir") + "\\UTILITARIOS", "Suporte.exe").toString();
            Principal.getpBarAtual().setString("Ammy suporte remoto gravado em: " + ammy + "...");
            Principal.getpBarAtual().setString("100 % concluído");
            Principal.getpBarTotal().setString("100 % concluído");
            Principal.getpBarAtual().setValue(Principal.getpBarAtual().getMaximum());
            Principal.getpBarTotal().setValue(Principal.getpBarTotal().getMaximum());
        } catch (IOException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
        } finally {
            storeImages.conectar();
            storeImages.InserirOpcao("atualizouFolha" + versao, "sim");
            storeImages.desconectar();
            JOptionPane.showMessageDialog(null, "A atualização foi concluída");
            try {
                Runtime.getRuntime().exec(System.getProperty("user.dir") + "\\MGFolha.exe");
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.exit(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JProgressBar pBarAtual;
    public static javax.swing.JProgressBar pBarTotal;
    // End of variables declaration//GEN-END:variables

    public static javax.swing.JTextArea getjTextArea1() {
        return jTextArea1;
    }

    public void setjTextArea1(javax.swing.JTextArea jTextArea1) {
        Principal.jTextArea1 = jTextArea1;
    }

    public static JProgressBar getpBarAtual() {
        return pBarAtual;
    }

    public static void setpBarAtual(JProgressBar pBarAtual) {
        Principal.pBarAtual = pBarAtual;
    }

    public static JProgressBar getpBarTotal() {
        return pBarTotal;
    }

    public static void setpBarTotal(JProgressBar pBarTotal) {
        Principal.pBarTotal = pBarTotal;
    }

    public static String getVersao() {
        return versao;
    }

    public static void setVersao(String versao) {
        Principal.versao = versao;
    }

}
